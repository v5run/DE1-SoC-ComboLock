module CombinationLock(
  input wire [3:0] X,     // 4-bit combination input
  input wire Enter,       // Enter input (pushbutton)
  input wire Change,      // Change input (pushbutton)
  input wire Reset,       // Reset input (pushbutton)
  output wire Open,       // Output for opening the door
  output wire Alarm,      // Output for the alarm
  output wire New,        // Output for new combination
  output wire [6:0] HEX5  // Seven-segment display HEX5
);

// Registers
reg [3:0] stored_combination;
reg [3:0] entered_combination;
reg [1:0] state;

// Parameters
parameter IDLE = 2'd0;
parameter ENTER_COMBINATION = 2'd1;
parameter CHANGE_COMBINATION = 2'd2;
parameter ALARM = 2'd3;

// Outputs
wire correct_combination = (stored_combination == entered_combination);

// State machine
always @(posedge Enter, posedge Change, posedge Reset) begin
  case(state)
    IDLE: begin
      if (Enter) begin
        state <= ENTER_COMBINATION;
        if (correct_combination) Open <= 1'b1;
        else if (!correct_combination) state <= ALARM;
      end
      else if (Change) state <= CHANGE_COMBINATION;
      else if (Reset) state <= IDLE;
    end
    ENTER_COMBINATION: begin
      if (Enter) state <= IDLE;
      else if (Change) state <= CHANGE_COMBINATION;
      else if (Reset) state <= IDLE;
    end
    CHANGE_COMBINATION: begin
      if (Enter) state <= ENTER_COMBINATION;
      else if (Change) begin
        state <= IDLE;
        New <= 1'b1;
      end
      else if (Reset) state <= IDLE;
    end
    ALARM: begin
      if (Enter || Change || Reset) state <= IDLE;
    end
  endcase
end

// Combinational logic for handling inputs
always @* begin
  if (state == ENTER_COMBINATION || state == CHANGE_COMBINATION)
    entered_combination = {X, entered_combination[3:1]}; // Shift entered combination
  else
    entered_combination = 4'b0;

  if (Reset) begin
    state = IDLE;
    stored_combination = 4'b0110; // Reset to default combination
  end

  if (state == CHANGE_COMBINATION && Enter && correct_combination)
    stored_combination = entered_combination; // Update the stored combination
end

// Initialize the stored combination to default
initial begin
  stored_combination = 4'b0110;
  state = IDLE;
end

// Initialize outputs
initial begin
  Open = 1'b0;
  Alarm = 1'b0;
  New = 1'b0;
end

// Instantiate Seven-Segment Display
SevenSegmentDisplay SSD(
  .Open(Open),
  .Alarm(Alarm),
  .New(New),
  .HEX5(HEX5)
);

endmodule
